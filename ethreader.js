// Generated by Haxe 3.4.0
if (process.version < "v4.0.0") console.warn("Module " + (typeof(module) == "undefined" ? "" : module.filename) + " requires node.js version 4.0.0 or higher");
(function ($hx_exports, $global) { "use strict";
$hx_exports["ethreader"] = $hx_exports["ethreader"] || {};
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Lambda = function() { };
Lambda.__name__ = true;
Lambda.foreach = function(it,f) {
	var x = $iterator(it)();
	while(x.hasNext()) {
		var x1 = x.next();
		if(!f(x1)) {
			return false;
		}
	}
	return true;
};
Math.__name__ = true;
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) {
		return false;
	}
	delete(o[field]);
	return true;
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	while(true) {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
		if(!(n > 0)) {
			break;
		}
	}
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
var BigNumber = require("bignumber.js");
var bignumberjs__$BigNumber_BigNumber_$Impl_$ = {};
bignumberjs__$BigNumber_BigNumber_$Impl_$.__name__ = true;
bignumberjs__$BigNumber_BigNumber_$Impl_$._new = function(value) {
	var this1 = new BigNumber(value);
	return this1;
};
bignumberjs__$BigNumber_BigNumber_$Impl_$.fromInt = function(value) {
	var this1 = new BigNumber(new BigNumber(value));
	return this1;
};
bignumberjs__$BigNumber_BigNumber_$Impl_$.fromFloat = function(value) {
	var this1 = new BigNumber(new BigNumber(value));
	return this1;
};
bignumberjs__$BigNumber_BigNumber_$Impl_$.fromString = function(value) {
	var this1 = new BigNumber(new BigNumber(value));
	return this1;
};
bignumberjs__$BigNumber_BigNumber_$Impl_$.random = function() {
	return BigNumber.random();
};
var ethreader_EthReader = function() { };
ethreader_EthReader.__name__ = true;
ethreader_EthReader.prototype = {
	__class__: ethreader_EthReader
};
var ethreader_EtherscanReader = $hx_exports["ethreader"]["EtherscanReader"] = function(apiKey) {
	this.type = "EtherscanReader";
	this._apiKey = apiKey;
};
ethreader_EtherscanReader.__name__ = true;
ethreader_EtherscanReader.__interfaces__ = [ethreader_EthReader];
ethreader_EtherscanReader.prototype = {
	newTransactionReader: function(address) {
		return new ethreader_TransactionsReader(address,this);
	}
	,getNetworkId: function(callback) {
		callback(null,"1");
	}
	,getAbi: function(address,onData) {
		var options = { host : "api.etherscan.io", path : "/api?module=contract&action=getabi&address=" + address + "&apikey=" + this._apiKey};
		var callback = null;
		callback = function(response) {
			var str = "";
			response.on("data",function(chunk) {
				str += chunk;
			});
			response.on("error",function(err) {
				onData(err,null);
			});
			response.on("end",function(chunk1) {
				var abi = null;
				var err1 = null;
				try {
					var result = JSON.parse(str);
					abi = JSON.parse(result.result);
				} catch( e ) {
					abi = null;
					err1 = "no abi for " + address;
				}
				if(err1 != null) {
					onData(err1,null);
				} else {
					onData(null,abi);
				}
			});
		};
		js_node_Http.request(options,callback).end();
	}
	,getTransactions: function(address,startBlock,endBlock,onData) {
		var options = { host : "api.etherscan.io", path : "/api?module=account&action=txlist&address=" + address + "&startblock=" + startBlock + "&endblock=" + endBlock + "&sort=asc&apikey=" + this._apiKey};
		var callback = null;
		callback = function(response) {
			var str = "";
			response.on("data",function(chunk) {
				str += chunk;
			});
			response.on("error",function(err) {
				onData(err,null);
			});
			response.on("end",function(chunk1) {
				var extendedTransactions = null;
				var transactions = null;
				var err1 = null;
				try {
					var result = JSON.parse(str);
					transactions = result.result;
				} catch( e ) {
					if (e instanceof js__$Boot_HaxeError) e = e.val;
					transactions = null;
					err1 = e;
				}
				if(err1 != null) {
					onData(err1,null);
				} else {
					var _g = 0;
					while(_g < transactions.length) {
						var transaction = transactions[_g];
						++_g;
						var transaction1 = transaction.hash;
						var callback1 = parseFloat(transaction.nonce);
						var transaction2 = transaction.blockHash;
						var callback2 = parseFloat(transaction.blockNumber);
						var callback3 = parseFloat(transaction.transactionIndex);
						var transaction3 = transaction.from;
						var transaction4 = transaction.to;
						var this1 = new BigNumber(transaction.value);
						var this2 = new BigNumber(transaction.gasPrice);
						extendedTransactions.push({ hash : transaction1, nonce : callback1, blockHash : transaction2, blockNumber : callback2, transactionIndex : callback3, from : transaction3, to : transaction4, value : this1, gasPrice : this2, gas : parseFloat(transaction.gas), input : transaction.input, blockTimestamp : parseFloat(transaction.timeStamp), isError : transaction.isError == "true", cumulativeGasUsed : parseFloat(transaction.cumulativeGasUsed), gasUsed : parseFloat(transaction.gasUsed), contractAddress : transaction.contractAddress, logs : null});
					}
					onData(null,extendedTransactions);
				}
			});
		};
		var request = js_node_Http.request(options,callback);
		request.end();
	}
	,__class__: ethreader_EtherscanReader
};
var parity_api_Http = require("@parity/parity.js").Api.Transport.Http;
var parity_Api = require("@parity/parity.js").Api;
var ethreader_TransactionDecoder = function() { };
ethreader_TransactionDecoder.__name__ = true;
ethreader_TransactionDecoder.addABI = function(address,abiString) {
	if(abiString != null && abiString != "") {
		var abi = null;
		try {
			abi = JSON.parse(abiString);
		} catch( e ) {
			return;
		}
		var methodAbiMap = new haxe_ds_StringMap();
		var _g = 0;
		while(_g < abi.length) {
			var methodAbi = abi[_g];
			++_g;
			var k = methodAbi.name;
			if(__map_reserved[k] != null) {
				methodAbiMap.setReserved(k,methodAbi);
			} else {
				methodAbiMap.h[k] = methodAbi;
			}
		}
		var contract = ethreader_TransactionDecoder._api.newContract(abi);
		var abiMap = new haxe_ds_StringMap();
		Lambda.foreach(contract.functions,function(fn) {
			if(fn != null && fn.signature != null) {
				var k1 = "0x" + fn.signature;
				var key = fn.name;
				var v = __map_reserved[key] != null ? methodAbiMap.getReserved(key) : methodAbiMap.h[key];
				if(__map_reserved[k1] != null) {
					abiMap.setReserved(k1,v);
				} else {
					abiMap.h[k1] = v;
				}
			}
			return true;
		});
		var _this = ethreader_TransactionDecoder.abiMapMap;
		if(__map_reserved[address] != null) {
			_this.setReserved(address,abiMap);
		} else {
			_this.h[address] = abiMap;
		}
	}
};
ethreader_TransactionDecoder.decodeTransaction = function(transaction) {
	var decodedTransaction = { hash : transaction.hash, nonce : transaction.nonce, blockHash : transaction.blockHash, blockNumber : transaction.blockNumber, transactionIndex : transaction.transactionIndex, from : transaction.from, to : transaction.to, value : transaction.value, gasPrice : transaction.gasPrice, gas : transaction.gas, input : transaction.input, blockTimestamp : transaction.blockTimestamp, isError : transaction.isError, cumulativeGasUsed : transaction.cumulativeGasUsed, gasUsed : transaction.gasUsed, contractAddress : transaction.contractAddress, logs : transaction.logs, decoded_call : null};
	ethreader_TransactionDecoder.decodeTransactionInPlace(decodedTransaction);
	return decodedTransaction;
};
ethreader_TransactionDecoder.decodeTransactionInPlace = function(transaction) {
	if(transaction.input == "0x" || transaction.input == "" || transaction.input == null) {
		return;
	}
	var callData = ethreader_TransactionDecoder._api.util.decodeCallData(transaction.input);
	var key = transaction.to;
	var _this = ethreader_TransactionDecoder.abiMapMap;
	var this1 = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
	var key1 = callData.signature;
	var _this1 = this1;
	var methodAbi = __map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1];
	if(methodAbi != null) {
		var inputArray = [];
		try {
			inputArray = ethreader_TransactionDecoder._api.util.decodeMethodInput(methodAbi,callData.paramdata);
		} catch( e ) {
		}
		var decoded_input = { };
		var _g1 = 0;
		var _g = inputArray.length;
		while(_g1 < _g) {
			var j = _g1++;
			var type = methodAbi.inputs[j].type;
			var value;
			if(type == "bytes32") {
				var s = "0x";
				var _g2 = 0;
				var _g3 = js_Boot.__cast(inputArray[j] , Array);
				while(_g2 < _g3.length) {
					var v = _g3[_g2];
					++_g2;
					s += StringTools.hex(v,2);
				}
				value = s;
			} else if(type.indexOf("[]") >= 0) {
				var array = [];
				var _g21 = 0;
				var _g31 = js_Boot.__cast(inputArray[j] , Array);
				while(_g21 < _g31.length) {
					var v1 = _g31[_g21];
					++_g21;
					array.push(v1._value);
				}
				value = array;
			} else {
				value = JSON.parse(JSON.stringify(inputArray[j]));
			}
			decoded_input[methodAbi.inputs[j].name] = value;
		}
		transaction.decoded_call = { "name" : methodAbi.name, "input" : decoded_input};
		Reflect.deleteField(transaction,"input");
	}
};
var js_node_Os = require("os");
var js_node_Fs = require("fs");
var ethreader_TransactionsReader = function(address,ethReader) {
	this._abiMap = null;
	this._address = address.toLowerCase();
	this._ethReader = ethReader;
	this._networkId = null;
};
ethreader_TransactionsReader.__name__ = true;
ethreader_TransactionsReader.prototype = {
	collect: function(callback,startBlock,endBlock) {
		if(endBlock == null) {
			endBlock = 2147483647;
		}
		if(startBlock == null) {
			startBlock = 0;
		}
		var _gthis = this;
		if(this._networkId == null) {
			this._ethReader.getNetworkId(function(error,networkId) {
				if(error != null) {
					callback(error,null);
				} else {
					_gthis._networkId = networkId;
					_gthis._collect_abi(startBlock,endBlock,callback);
				}
			});
		} else {
			this._collect_abi(startBlock,endBlock,callback);
		}
	}
	,_get_abi_from_cache: function(callback) {
		var _gthis = this;
		this.getFromFile(ethreader_TransactionsReader._folder + "/" + this._networkId + "_" + this._address + ".abi",function(error,data) {
			if(error != null) {
				callback(error);
			} else if(data == "") {
				callback("nothing in cache");
			} else {
				try {
					var dynamicAccess = JSON.parse(data);
					_gthis._abiMap = new haxe_ds_StringMap();
					var _g = 0;
					var _g1 = Reflect.fields(dynamicAccess);
					while(_g < _g1.length) {
						var key = _g1[_g];
						++_g;
						var v = dynamicAccess[key];
						var _this = _gthis._abiMap;
						if(__map_reserved[key] != null) {
							_this.setReserved(key,v);
						} else {
							_this.h[key] = v;
						}
					}
					callback(null);
				} catch( e ) {
					callback("error parsing data");
				}
			}
		});
	}
	,_save_abi_to_cache: function(callback) {
		var dynamicAccess = { };
		var key = this._abiMap.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			var _this = this._abiMap;
			dynamicAccess[key1] = __map_reserved[key1] != null ? _this.getReserved(key1) : _this.h[key1];
		}
		this.saveToFile(ethreader_TransactionsReader._folder + "/" + this._networkId + "_" + this._address + ".abi",JSON.stringify(dynamicAccess),callback);
	}
	,_collect_abi: function(startBlock,endBlock,callback) {
		var _gthis = this;
		if(this._abiMap == null) {
			this._get_abi_from_cache(function(error) {
				if(error != null) {
					_gthis._fetch_abi(function(error1) {
						if(error1 != null) {
							callback(error1,null);
						} else {
							_gthis._collect(startBlock,endBlock,callback);
						}
					});
				} else {
					_gthis._collect(startBlock,endBlock,callback);
				}
			});
		} else {
			this._collect(startBlock,endBlock,callback);
		}
	}
	,_fetch_abi: function(callback) {
		var _gthis = this;
		this._ethReader.getAbi(this._address,function(error,abi) {
			if(error != null) {
				callback(error);
			} else {
				var methodAbiMap = new haxe_ds_StringMap();
				var _g = 0;
				while(_g < abi.length) {
					var methodAbi = abi[_g];
					++_g;
					var k = methodAbi.name;
					if(__map_reserved[k] != null) {
						methodAbiMap.setReserved(k,methodAbi);
					} else {
						methodAbiMap.h[k] = methodAbi;
					}
				}
				var contract = ethreader_TransactionsReader._api.newContract(abi);
				_gthis._abiMap = new haxe_ds_StringMap();
				Lambda.foreach(contract.functions,function(fn) {
					if(fn != null && fn.signature != null) {
						var this1 = _gthis._abiMap;
						var k1 = "0x" + fn.signature;
						var key = fn.name;
						var v = __map_reserved[key] != null ? methodAbiMap.getReserved(key) : methodAbiMap.h[key];
						var _this = this1;
						if(__map_reserved[k1] != null) {
							_this.setReserved(k1,v);
						} else {
							_this.h[k1] = v;
						}
					}
					return true;
				});
				_gthis._save_abi_to_cache(function(error1) {
					callback(error1);
				});
			}
		});
	}
	,_get_transactions_from_cache: function(callback) {
		this.getFromFile(ethreader_TransactionsReader._folder + "/" + this._ethReader.type + "_" + this._networkId + "_" + this._address + ".tx",function(error,data) {
			if(error != null) {
				callback(error,null);
			} else if(data == "") {
				callback("nothing in cache",null);
			} else {
				var tmp = JSON.parse(data);
				callback(null,tmp);
			}
		});
	}
	,_save_transactions_to_cache: function(transactions,callback) {
		this.saveToFile(ethreader_TransactionsReader._folder + "/" + this._ethReader.type + "_" + this._networkId + "_" + this._address + ".tx",JSON.stringify({ transactions : transactions, timestamp : new Date().getTime() / 1000 | 0, lastBlock : transactions[transactions.length - 1].blockNumber}),callback);
	}
	,_collect: function(startBlock,endBlock,callback) {
		var _gthis = this;
		this._get_transactions_from_cache(function(error,transactionsCache) {
			var cacheDuration = 300;
			if(error != null || new Date().getTime() / 1000 - transactionsCache.timestamp > cacheDuration && transactionsCache.lastBlock < endBlock) {
				var prevTransactions = [];
				var fetchStartBlock = 0;
				if(transactionsCache != null) {
					prevTransactions = transactionsCache.transactions;
					fetchStartBlock = transactionsCache.lastBlock + 1 | 0;
				}
				_gthis._ethReader.getTransactions(_gthis._address,fetchStartBlock,endBlock,function(error1,transactions) {
					if(error1 != null) {
						callback(error1,null);
					} else {
						var extraTransactions = transactions.length > 0;
						if(extraTransactions) {
							var _g = 0;
							while(_g < transactions.length) {
								var transaction = transactions[_g];
								++_g;
								var decodedTransaction = transaction;
								prevTransactions.push(decodedTransaction);
								ethreader_TransactionDecoder.decodeTransactionInPlace(decodedTransaction);
							}
						}
						var transactionsToOutput = prevTransactions.filter(function(tx) {
							if(tx.blockNumber >= startBlock) {
								return tx.blockNumber <= endBlock;
							} else {
								return false;
							}
						});
						if(extraTransactions) {
							_gthis._save_transactions_to_cache(prevTransactions,function(error2) {
								callback(null,transactionsToOutput);
							});
						} else {
							callback(null,transactionsToOutput);
						}
					}
				});
			} else {
				var transactionsToOutput1 = transactionsCache.transactions.filter(function(tx1) {
					if(tx1.blockNumber >= startBlock) {
						return tx1.blockNumber <= endBlock;
					} else {
						return false;
					}
				});
				callback(null,transactionsToOutput1);
			}
		});
	}
	,saveToFile: function(filename,data,callback) {
		js_node_Fs.writeFile(filename,data,function(err) {
			callback(err);
		});
	}
	,getFromFile: function(filename,callback) {
		js_node_Fs.readFile(filename,function(err,result) {
			if(err != null) {
				callback(err,null);
			} else if(result.toString() == "") {
				callback("nothing",null);
			} else {
				var tmp = result.toString();
				callback(err,tmp);
			}
		});
	}
	,__class__: ethreader_TransactionsReader
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = true;
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,__class__: haxe_ds_StringMap
};
var haxe_io_Bytes = function() { };
haxe_io_Bytes.__name__ = true;
haxe_io_Bytes.prototype = {
	__class__: haxe_io_Bytes
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__cast = function(o,t) {
	if(js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_node_Http = require("http");
var js_node_buffer_Buffer = require("buffer").Buffer;
var js_node_net_Socket = require("net").Socket;
var web3_Provider = function() { };
web3_Provider.__name__ = true;
web3_Provider.prototype = {
	__class__: web3_Provider
};
var web3__$Web3_TransactionHash_$Impl_$ = {};
web3__$Web3_TransactionHash_$Impl_$.__name__ = true;
web3__$Web3_TransactionHash_$Impl_$._new = function(value) {
	var this1 = value;
	return this1;
};
var web3__$Web3_Address_$Impl_$ = {};
web3__$Web3_Address_$Impl_$.__name__ = true;
web3__$Web3_Address_$Impl_$._new = function(value) {
	var this1 = value;
	return this1;
};
var web3__$Web3_Ether_$Impl_$ = {};
web3__$Web3_Ether_$Impl_$.__name__ = true;
web3__$Web3_Ether_$Impl_$._new = function(value) {
	var this1 = value;
	return this1;
};
web3__$Web3_Ether_$Impl_$.fromInt = function(value) {
	var this1 = new BigNumber(new BigNumber(value));
	var this2 = this1;
	return this2;
};
web3__$Web3_Ether_$Impl_$.toWei = function(this1) {
	web3_Web3Lib.setup();
	var this2 = new BigNumber(new BigNumber(web3_Web3Lib._web3["toWei"](this1,"ether")));
	return this2;
};
var web3__$Web3_Wei_$Impl_$ = {};
web3__$Web3_Wei_$Impl_$.__name__ = true;
web3__$Web3_Wei_$Impl_$._new = function(value) {
	var this1 = value;
	return this1;
};
web3__$Web3_Wei_$Impl_$.fromEther = function(ether) {
	web3_Web3Lib.setup();
	var this1 = new BigNumber(new BigNumber(web3_Web3Lib._web3["toWei"](ether,"ether")));
	var this2 = this1;
	return this2;
};
web3__$Web3_Wei_$Impl_$.fromInt = function(value) {
	var this1 = new BigNumber(new BigNumber(value));
	var this2 = this1;
	return this2;
};
var web3_Web3Lib = function() { };
web3_Web3Lib.__name__ = true;
web3_Web3Lib.createHttpProvider = function(url) {
	return new Web3.providers.HttpProvider(url);
};
web3_Web3Lib.createIpcProvider = function(url) {
	var client = new js_node_net_Socket();
	return new Web3.providers.IpcProvider(url,client);
};
web3_Web3Lib.setup = function() {
	if(typeof Web3 == 'undefined'){
				if(typeof global != 'undefined'){
					global.Web3 = require('web3');
				}else if(typeof window != 'undefined'){
					window.Web3 = require('web3');
				}
			}
	if(web3_Web3Lib._web3 == null) {
		web3_Web3Lib._web3 = new Web3();
		web3_Web3Lib._web3.reset();
	}
};
web3_Web3Lib.createInstance = function() {
	return new Web3();
};
web3_Web3Lib.toWei = function(value,base) {
	web3_Web3Lib.setup();
	return web3_Web3Lib._web3["toWei"](value,base);
};
function $iterator(o) { if( o instanceof Array ) return function() { return HxOverrides.iter(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
Date.prototype.__class__ = Date;
Date.__name__ = ["Date"];
var Int = { __name__ : ["Int"]};
var Dynamic = { __name__ : ["Dynamic"]};
var Float = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = { __name__ : ["Class"]};
var Enum = { };
ethreader_TransactionDecoder._api = new parity_Api(new parity_api_Http(""));
ethreader_TransactionDecoder._api.transport._connectTimeout = -1;
ethreader_TransactionsReader._api = new parity_Api(new parity_api_Http(""));
ethreader_TransactionsReader._api.transport._connectTimeout = -1;
ethreader_TransactionsReader._folder = js_node_Os.homedir() + "/.ethreader";
if(!js_node_Fs.existsSync(ethreader_TransactionsReader._folder)) {
	js_node_Fs.mkdirSync(ethreader_TransactionsReader._folder);
}
var __map_reserved = {}
ethreader_TransactionDecoder.abiMapMap = new haxe_ds_StringMap();
js_Boot.__toStr = ({ }).toString;
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
